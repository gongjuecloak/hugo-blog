[{"content":"","date":"2025-01-20","externalUrl":null,"permalink":"/posts/","section":"","summary":"","title":"","type":"posts"},{"content":"","date":"2025-01-20","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"2025-01-20","externalUrl":null,"permalink":"/series/c%E8%AF%AD%E8%A8%80/","section":"Series","summary":"","title":"C语言","type":"series"},{"content":"","date":"2025-01-20","externalUrl":null,"permalink":"/tags/c%E8%AF%AD%E8%A8%80/","section":"Tags","summary":"","title":"C语言","type":"tags"},{"content":"","date":"2025-01-20","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"2025-01-20","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2025-01-20","externalUrl":null,"permalink":"/categories/%E7%AC%94%E8%AE%B0/","section":"Categories","summary":"","title":"笔记","type":"categories"},{"content":"","date":"2025-01-20","externalUrl":null,"permalink":"/","section":"沉沦者的美梦","summary":"","title":"沉沦者的美梦","type":"page"},{"content":"","date":"2025-01-20","externalUrl":null,"permalink":"/tags/%E6%95%B0%E7%BB%84/","section":"Tags","summary":"","title":"数组","type":"tags"},{"content":"","date":"2025-01-20","externalUrl":null,"permalink":"/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","section":"Tags","summary":"","title":"学习笔记","type":"tags"},{"content":" 3.1 一维数组 # 数组大小\nconst int number = 10; 使用 sizeof 给出整个数组所占据的内容的大小，单位是字节：sizeof(a)/sizeof(a[0]) 初始化数组\nfor(i=0;i\u0026lt;number;i++){ count[i]=0; } 集成初始化\nint a[] = {2,4,6,7,1}; 集成初始化时的定位 int a[10] = {[0] = 2,[2] = 3,6,}; 定义数组\n\u0026lt; 类型 \u0026gt; 变量名称 [ 元素数量 ]\nint number[100];\nscanf(\u0026quot;%d\u0026quot;,\u0026amp;number[i]);\nint grades[100];\ndouble weight[20];\n元素数量必须是整数\n使用数组时放在[]中的数字叫做下标或索引，下标从0开始计数\n有效的下标范围\n[ 0 , 数组的大小 - 1 ] 数组的赋值\n注：数组变量本身不能被赋值，要把一个数组的所有元素交给另一个数组，必须采用遍历\nfor(i=0;i\u0026lt;length;i++){ b[i] = a[i]; } 数组运算\n遍历数组输出\nfor(i=0;i\u0026lt;number;i++){ printf(\u0026#34;%d:%d\\n\u0026#34;,i,count[i]); } 3.2 二维数组 # int a [ 3 ] [ 5 ] 理解为 a 是一个 3 行 5 列的矩阵 初始化\nint a[][5] = { {0,1,2,3,4}, {2,3,4,5,6}, } 注：列数必须给出\n数组运算\n","date":"2025-01-20","externalUrl":null,"permalink":"/posts/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%95%B0%E7%BB%84/","section":"","summary":"","title":"学习笔记第三章 数组","type":"posts"},{"content":"","date":"2025-01-20","externalUrl":null,"permalink":"/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/","section":"Tags","summary":"","title":"基础语法","type":"tags"},{"content":" 2.1 数据的表现形式 # 1.常量\n在程序运行过程中，其值不能被改变的量称为常量\n常量有以下几类：\n（1）整型常量：如 1000，12345，0，-234 等\n（2）实型常量：十进制小数形式、指数形式\n（3）字符常量：① 普通字符，用单撇号括起来的一个字符，如 \u0026lsquo;a\u0026rsquo;, \u0026lsquo;Z\u0026rsquo; 等 ② 转义字符，如 \u0026lsquo;'\u0026rsquo;,\u0026rsquo;\\\u0026rsquo; 等\n（4）字符串常量：用双引号引起来的多个字符，如 \u0026ldquo;China\u0026rdquo; 等\n（5）符号常量：用 #define 指令，指定用一个符号名称代表一个常量，如：\n#define PI 3.1416 符号常量的优点：含义清楚、一改全改\n2.变量\n变量代表一个有名字的、具有特定属性的一个存储单元，它用来存放数据，也就是存放变量的值。在程序运行期间，变量的值是可以改变的。\n变量必须先定义，后使用。\n3.常变量\nC99 允许使用常变量：\nconst int AMOUNT = 100; 常变量是有名字的不变量，而常量是没有名字的不变量。\n常变量和符号常量有什么不同？\n答：定义符号常量用 #define 指令，它是预编译指令，它知识用符号常量代表一个字符串，在预编译时仅是进行字符替换，在预编译后，符号常量就不存在了，对符号常量的名字是不分配存储单元的。而常变量要占用存储单元，有变量值，只是该值不改变。\n4.标识符\n标识符就是一个对象的名字。如变量名、函数名等等\nC语言规定标识符只能由字母、数字和下划线 3 种字符组成，且第一个字符必须为字母或下划线。\n2.2 数据类型 # （1）int 型\n编译系统分配给 int 型数据 2 个字节或 4 个字节（VC++ 6.0 就是分配 4 个字节）。\n在存储单元中的存储方式：用整数的补码形式存放。\nint 表示一个寄存器的大小\n（2）short int 型\n分配 2 个字节 （3）long int 型\n分配 4 个字节，在一个整数的末尾加大写字母 L 或小写字母 l 即可表示为 long int 型 （4）long long int 型\n分配 8 个字节 （5）字符 char 类型\n分配 1 个字节 （6）float 类型(单精度浮点型)\n分配 4 个字节 （7）double 类型(双精度浮点型)\n分配 8 个字节 （8）long double 类型(长双精度浮点型)\nTurbo C 分配给 long double 16 个字节 Visual C++ 6.0 分配 8 个字节 2.3 关键字和保留标识符 # auto break case char const continue default do double else enum extern float for goto if int long register return short signed sizeof static struct switch typedef union unsigned void volatile while inline restrict 2.4 赋值和初始化 # 变量初始化 \u0026lt;类型名称\u0026gt;\u0026lt;变量名称\u0026gt; = \u0026lt;初始值\u0026gt;； eg.\tint price = 0; 2.5 运算符和算子 # eg. int a = b + 5; 计算时间差 #include \u0026#34;stdio.h\u0026#34; /*计算时间差*/ int main() { int hour1, minute1; int hour2, minute2; scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;hour1, \u0026amp;minute1); scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;hour2, \u0026amp;minute2); int t1 = hour1 * 60 + minute1; int t2 = hour2 * 60 + minute2; int t = t2 - t1; printf(\u0026#34;时间差是 %d 小时 %d 分钟。\u0026#34;,t/60, t%60); return 0; } 运算符优先级 自增、自减运算符：\n++i 、--i ：使用 i 之前，先使 i 的值加（减）1 i++ 、i-- ：在使用i之后，使 i 的值加（减）1 自增、自减运算符只能用于变量，而不能用于常量或表达式。 强制类型转换运算符：\n(类型名)(表达式) 求字节数运算符：\nsizeof 2.6 数据的输入输出 # scanf (格式输入)、printf (格式输出)\ngetchar (输入字符)、putchar (输出字符)\ngets (输入字符串)、puts (输出字符串)\n在使用它们之前需要在开头用预处理指令 #include \u0026lt;stdio.h\u0026gt;\nprintf 函数的一般格式\nprintf (格式控制，输出列表)\n例如：printf (\u0026quot; %f 约等于 %d \u0026ldquo;, i , c );\n1 类型安全\n强类型 早期语言强调类型，面向底层的语言强调类型 C语言需要类型，但是对类型的安全检查并不足够 2 sizeof\n是一个静态运算符，给出某个类型或者变量在内存中所占据的字节数 sizeof(int) sizeof(i) Example 01： #include \u0026lt;stdio.h\u0026gt; int main() { int a = 6; printf(\u0026#34;sizeof(int)=%ld\\n\u0026#34;,sizeof(int)); printf(\u0026#34;sizeof(a)=%ld\\n\u0026#34;,sizeof(a)); return 0; } 3 补码\nExample 01： #include \u0026lt;stdio.h\u0026gt; int main() { char c = 255; int i = 255; printf(\u0026#34;c=%d,i=%d\\n\u0026#34;,c,i); return 0; } 4 unsigned\n无符号整数型（0-255） 255u 用 l 或 L 表示 long unsigned 的初衷并非是扩展数能表达的范围，而是为了做纯二进制运算，主要是为了移位 2.6.1 整数的输入输出 # 只有两种形式：int 或 long long\n%d：int\n%u：unsigned\n%ld：long long\n%lu：unsigned long long\nExample 01：\n#include \u0026lt;stdio.h\u0026gt; int main() { char c = -1; int i = -1; printf(\u0026#34;c=%u,i=%u\\n\u0026#34;,c,i); return 0; } Example 02：八进制和十六进制转换为十进制 #include \u0026lt;stdio.h\u0026gt; int main() { char c = 012;//八进制 int i = 0x12;//十六进制 printf(\u0026#34;c=%d,i=%d\\n\u0026#34;,c,i); return 0; } Example 03：八进制和十六进制输出 #include \u0026lt;stdio.h\u0026gt; int main() { char c = 012;//八进制 int i = 0x12;//十六进制 printf(\u0026#34;c=0%o,i=0x%x\\n\u0026#34;,c,i); printf(\u0026#34;c=0%o,i=0x%X\\n\u0026#34;,c,i); return 0; } 2.6.2 浮点数的输入输出 # float （4字节） 输入 %f 格式，输出 %f 或 %e\ndouble （8字节）输入 %lf 格式，输出 %lf 或 %e\n科学计数法：-5.67E+16\n输出精度：\n在 % 和 f 之间加上 .n 可以指定输出小数点后几位，这样的输出是做4舍5入的 printf(\u0026rdquo;%.3f\\n\u0026quot;,-0.0046); #include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;%.3f\\n\u0026#34;,-0.0046); printf(\u0026#34;%.30f\\n\u0026#34;,-0.0046); printf(\u0026#34;%.3f\\n\u0026#34;,-0.00046); return 0; } 超过范围的浮点数:\nprintf 输出 inf 表示超过范围的浮点数：±∞ printf 输出 nan 表示不存在的浮点数 Example 01:\n#include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;%f\\n\u0026#34;,12.0/0.0); printf(\u0026#34;%f\\n\u0026#34;,-12.0/0.0); printf(\u0026#34;%f\\n\u0026#34;,0.0/0.0); return 0; } 浮点运算的精度 f1 == f2 可能值相等，但不等 利用 fabs(f1-f2)\u0026lt;1e-12 2.6.3 字符的输入输出 # 如何输入 ‘1‘ 这个字符给 char c？\nscanf(\u0026quot;%c\u0026quot;,\u0026amp;c);\n#include \u0026lt;stdio.h\u0026gt; int main() { char c; scanf(\u0026#34;%c\u0026#34;,\u0026amp;c); printf(\u0026#34;c=%d\\n\u0026#34;,c); printf(\u0026#34;c=%c\\n\u0026#34;,c); return 0; } Example 01：\n#include \u0026lt;stdio.h\u0026gt; int main() { char c; char d; c = 1; d = \u0026#39;1\u0026#39;; if(c == d){ printf(\u0026#34;相等\\n\u0026#34;); }else{ printf(\u0026#34;不相等\\n\u0026#34;); } printf(\u0026#34;c=%d\\n\u0026#34;,c); printf(\u0026#34;d=%d\\n\u0026#34;,d); return 0; } 字母大小写转换 a+\u0026lsquo;a\u0026rsquo;-\u0026lsquo;A\u0026rsquo; 大写字母变成小写字母 a+\u0026lsquo;A\u0026rsquo;-\u0026lsquo;a\u0026rsquo; 小写字母变成大写字母 5 逃逸字符\n字符 意义 字符 意义 \\b 回退一格 \\ \u0026quot; 双引号 \\t 到下一个表格位 \\ ' 单引号 \\n 换行 \\ \\ 反斜杠本身 \\r 回车 Example 01： #include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;123\\bA\\n456\u0026#34;); return 0; } 6 自动类型转换\n当运算符的两边出现不一致的类型时，会自动转换成较大的类型 char \u0026ndash;\u0026gt; short \u0026ndash;\u0026gt; int \u0026ndash;\u0026gt; long \u0026ndash;\u0026gt; long long int \u0026ndash;\u0026gt; float \u0026ndash;\u0026gt; double short \u0026mdash;\u0026ndash; %hd long \u0026mdash;\u0026mdash; %ld 7 强制类型转换\nExample 01：\n(int)10.2\n(short)32\n反例1：\n#include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;%d\\n\u0026#34;,(short)32768); return 0; } 结果：-32768\n反例2：\n#include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;%d\\n\u0026#34;,(char)32768); return 0; } 结果：0\n注：强制类型转换的优先级高于四则运算\n2.7 选择结构和条件判断 # C 语言有两种选择语句：\n（1）if 语句，用来实现两个分支的选择结构\nif (表达式) 语句1 else 语句2 （2）switch 语句，用来实现多分支的选择结构\nswitch(表达式) { case 常量1 ：语句1 case 常量2 ：语句2 ... case 常量n ：语句n default: 语句n+1 2.8 循环结构 # （1）用 while 语句实现循环\nwhile(表达式) 语句 （2）用 do\u0026hellip;while 语句实现循环\ndo 语句 while(表达式); （3）用 for 语句实现循环\nfor(表达式1;表达式2;表达式3) 语句 改变循环执行的状态 （1）用 break 语句提前终止循环\n一般形式：break; 注意：break 语句还可以用来从循环体内跳出循环体，即提前结束循环，接着执行循环下面的语句。break 语句只能用于循环语句和 switch 语句之中，而不能单独使用。\n（2）用 continue 语句提前结束本次循环\n一般形式：continue; 注：作用为结束本次循环，即跳过循环体中下面尚未执行的语句，转到循环体结束点之前，然后进行下一次是否执行循环的判定。\nbool\n#include \u0026lt;stdbool.h\u0026gt; 之后就可以使用bool和true、false #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdbool.h\u0026gt; int main() { bool b = 6\u0026gt;5; printf(\u0026#34;%d\u0026#34;,b); return 0; } 随机数\nrand() #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;time.h\u0026gt; //主函数 int main(){ srand(time(0)); int a = rand(); printf(\u0026#34;%d\\n\u0026#34;,a); return 0; } x%n 的结果是[0,n-1]的一个整数 printf(\u0026#34;%d\\n\u0026#34;,a%100); Example：猜数游戏\nExample 01：\n#include \u0026lt;stdio.h\u0026gt; int main() { unsigned char c = 255; int i = 255; printf(\u0026#34;c=%d,i=%d\\n\u0026#34;,c,i); return 0; } 逻辑运算\n运算符 描述 事例 ！ 逻辑非 !a \u0026amp;\u0026amp; 逻辑与 a \u0026amp;\u0026amp; b || 逻辑或 a || b 2.9 函数 # 函数是一块代码，接收零个或多个参数，做一件事情，并返回零个或一个值\n函数原型，以分号结尾，即声明\nExample 01：判断素数\nint isPrime(int i){ int result = 1; int k; for(k=2;k\u0026lt;i-1;k++){ if(i%k == 0){ result = 0; break; } } return result; } Example 02：求和函数 ==\u0026gt; 求1到10、20到30和36到45的三个和\nvoid sum(int begin,int end){ int i; int sum = 0; for(i=begin;i\u0026lt;=end;i++){ sum += i; } printf(\u0026#34;%d 到 %d 的和是 %d\\n\u0026#34;,begin,end,sum); } C 语言在调用函数时，永远只能传值给函数\n局部变量\n也叫：本地变量 ==\u0026gt; 定义在函数内部的变量 生存期和作用域 ==\u0026gt; 大括号内，即代码块 全局变量\n定义在函数体外面 避免代码复制 代码复制是代码不良的表现！\n","date":"2025-01-20","externalUrl":null,"permalink":"/posts/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/","section":"","summary":"","title":"学习笔记第二章 基本语法","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/notes/","section":"Notes","summary":"","title":"Notes","type":"notes"}]